
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS COMMA DELETE FROM IDENTIFIER INSERT INTO LPAREN NOT NULL NUMBER OR RPAREN SELECT SEMICOLON SET STRING UPDATE VALUES WHERE\n    insert_statement : INSERT INTO IDENTIFIER LPAREN column_list RPAREN VALUES LPAREN value_list RPAREN\n    \n    column_list : IDENTIFIER\n                | column_list COMMA IDENTIFIER\n    \n    value_list : value\n               | value_list COMMA value\n    \n    value : STRING\n          | NUMBER\n          | NULL\n    \n    select_statement : SELECT select_list FROM table_expression\n    \n    select_list : select_item\n                | select_list COMMA select_item\n    \n    select_item : IDENTIFIER\n                | IDENTIFIER AS IDENTIFIER\n    \n    table_expression : IDENTIFIER\n                     | table_expression COMMA IDENTIFIER\n    '
    
_lr_action_items = {'INSERT':([0,],[2,]),'$end':([1,18,],[0,-1,]),'INTO':([2,],[3,]),'IDENTIFIER':([3,5,9,],[4,6,11,]),'LPAREN':([4,10,],[5,12,]),'RPAREN':([6,7,11,13,14,15,16,17,20,],[-2,8,-3,18,-4,-6,-7,-8,-5,]),'COMMA':([6,7,11,13,14,15,16,17,20,],[-2,9,-3,19,-4,-6,-7,-8,-5,]),'VALUES':([8,],[10,]),'STRING':([12,19,],[15,15,]),'NUMBER':([12,19,],[16,16,]),'NULL':([12,19,],[17,17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'insert_statement':([0,],[1,]),'column_list':([5,],[7,]),'value_list':([12,],[13,]),'value':([12,19,],[14,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> insert_statement","S'",1,None,None,None),
  ('insert_statement -> INSERT INTO IDENTIFIER LPAREN column_list RPAREN VALUES LPAREN value_list RPAREN','insert_statement',10,'p_insert_statement','parser_1.py',14),
  ('column_list -> IDENTIFIER','column_list',1,'p_column_list','parser_1.py',20),
  ('column_list -> column_list COMMA IDENTIFIER','column_list',3,'p_column_list','parser_1.py',21),
  ('value_list -> value','value_list',1,'p_value_list','parser_1.py',30),
  ('value_list -> value_list COMMA value','value_list',3,'p_value_list','parser_1.py',31),
  ('value -> STRING','value',1,'p_value','parser_1.py',40),
  ('value -> NUMBER','value',1,'p_value','parser_1.py',41),
  ('value -> NULL','value',1,'p_value','parser_1.py',42),
  ('select_statement -> SELECT select_list FROM table_expression','select_statement',4,'p_select_statement','parser_1.py',49),
  ('select_list -> select_item','select_list',1,'p_select_list','parser_1.py',55),
  ('select_list -> select_list COMMA select_item','select_list',3,'p_select_list','parser_1.py',56),
  ('select_item -> IDENTIFIER','select_item',1,'p_select_item','parser_1.py',65),
  ('select_item -> IDENTIFIER AS IDENTIFIER','select_item',3,'p_select_item','parser_1.py',66),
  ('table_expression -> IDENTIFIER','table_expression',1,'p_table_expression','parser_1.py',75),
  ('table_expression -> table_expression COMMA IDENTIFIER','table_expression',3,'p_table_expression','parser_1.py',76),
]
